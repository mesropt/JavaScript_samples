/*
1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c); // 2
d = b++; alert(d); // 1
c = (2+ ++a); alert(c); // 5
d = (2+ b++); alert(d); // 4
alert(a); // 3
alert(b); // 3
Почему код даёт именно такие результаты?
 */

var a = 1, b = 1, c //2, d //2;
c = ++a; alert(c); // 2
/* Инкремент ++ увеличивает переменную на 1 (то есть 1 + 1), но еогда оператор идёт до
переменной — это «префиксная форма».*/
d = b++; alert(d); // 1
/* Инкремент ++ увеличивает переменную на 1 (1 + 1), но когда оператор идёт после
переменной — это «постфиксная форма»:
В вышеуказанных двух случаях инкремент ++ делает одно и то же, но с одним отличием - в первом случае (префиксная
форма) инкремент возвращает (показывает нам) новое значение), в то время как во втором случае (постфиксная
форма) инкремент возвращает (показывает нам) старое значение).
Тем самым, если результат оператора мы не хотим использовать, а хотим только лишь увеличить или уменьшить
переменную, то не имеет значения используем мы постфиксную или префиксную формы инкремента. Если же мы хотим
использовать результат, то нужна префиксная форма. */
c = (2+ ++a); alert(c); // 5
/* В первом примере мы увеличили a на единицу (стал 2). Тем самым сейчас у нас получается 2 + 3, что равно 5. */
d = (2+ b++); alert(d); // 4
/* Во втором примере мы увеличили b на единицу, но вернули 1. Тем самым сейчас у нас получается 2 + 2 (то есть на
входе у нас первоначальный b). */
alert(a); // 3
/* В первом и третьем примерах a у нас вырос на 1 по разу в каждом.*/
alert(b); // 3
/* Во втором и четвёртом примерах b у нас вырос на 1 по разу в каждом. Получается, что b этот рост был записан,
 но вот выражение во втором и четвёртом примерах этот результат не вывело.*/